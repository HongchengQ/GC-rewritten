import org.gradle.plugins.ide.eclipse.model.SourceFolder

/*
 * Plugin configuration.
 */

plugins {
    id 'java' // Support for Java.
    id 'application' // Apply the application plugin to add support for building a CLI application.
    id 'com.google.protobuf' version "0.8.18" // Support for Protocol Buffers.
    id 'com.diffplug.spotless' version "6.11.0" // Apply the Spotless linter plugin.

    id 'eclipse' // Support for Eclipse.
    id 'idea' // Support for IntelliJ IDEA.

    id 'maven-publish' // Support for publishing to Maven.
    id 'signing' // Support for signing artifacts.
}

spotless {
    java {
        importOrder('io.grasscutter', '', 'java', 'javax', '\\#java', '\\#') // Configure import order.
        googleJavaFormat("1.15.0") // Use Google's Java formatter.
                .reflowLongStrings() // Reflow long strings.
        formatAnnotations() // Reformat annotations.
        endWithNewline() // Ensure files end with a newline.
        indentWithTabs(2); indentWithSpaces(4) // Use 4 spaces for indentation.
        toggleOffOn() // Toggle off/on.
    }
}

/*
 * Artifact information.
 */

group 'io.grasscutter'
version '2.0.0-snapshot'
targetCompatibility = JavaVersion.VERSION_17
sourceCompatibility = JavaVersion.VERSION_17

/*
 * Dependency configuration.
 */

repositories {
    mavenCentral()
}

dependencies {
    // Additional annotation packs.
    implementation group: 'org.jetbrains', name: 'annotations', version: '22.0.0'

    // Include any JAR-based libraries.
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Software logging.
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.36'

    // Command line interface.
    implementation group: 'org.jline', name: 'jline', version: '3.21.0'
    implementation group: 'org.jline', name: 'jline-terminal-jna', version: '3.21.0'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.10.0'

    // Server networking.
    protobuf files('src/proto/')
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.19.6'
    implementation group: 'io.netty', name: 'netty-common', version: '4.1.79.Final'
    implementation group: 'io.netty', name: 'netty-handler', version: '4.1.79.Final'
    implementation group: 'io.netty', name: 'netty-transport-native-epoll', version: '4.1.79.Final'
    implementation group: 'io.netty', name: 'netty-transport-native-kqueue', version: '4.1.79.Final'

    // HTTP implementation.
    implementation(group: 'io.javalin', name: 'javalin', version: '5.4.2') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    // Data storage.
    implementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.7.1'

    // Encoding.
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'

    // Configure Lombok.
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    // Testing dependencies.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

/*
 * Compilation configuration.
 */

application {
    // Set the main class for the application.
    getMainClass().set('io.grasscutter.Grasscutter')
}

sourceSets {
    // Configure the main source set.
    main {
        proto {
            // Include any Protocol Buffer files.
            srcDir 'src/generated'
        }
        java {
            // Configure the Java source directory.
            srcDir 'src/main/java'
        }
    }

    // Configure the test source set.
    test {
        proto {
            // Include any Protocol Buffer files.
            srcDir 'src/generated'
        }
        java {
            // Configure the source directory.
            srcDir 'src/test/java'
        }
    }
}

processResources {
    dependsOn 'generateProto'
}

jar {
    // Exclude Protocol Buffer files.
    exclude '*.proto'

    // Configure JAR archive.
    manifest {
        attributes 'Main-Class': 'io.grasscutter.Grasscutter'
    }

    archiveBaseName = "grasscutter"
    if(project.hasProperty('jarFilename'))
        archiveFileName.set("${jarFilename}.${extension}")

    // Configure bundling.
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Set the destination.
    destinationDirectory.set(file("${project.rootDir}/dist"))
}

/*
 * Scripts.
 */

clean {
    // Delete the generated files.
    delete protobuf.generatedFilesBaseDir
}

task injectGitHash {
    def getHash = {
        try {
            return 'git rev-parse --verify --short HEAD'
                    .execute().text.trim()
        } catch (ignored) {
            return 'GIT_NOT_FOUND'
        }
    }

    new File(projectDir, "src/main/java/io/grasscutter/BuildConfig.java").text =
            """package io.grasscutter;

public final class BuildConfig {
    public static final String VERSION = \"${version}\";
    public static final String GIT_HASH = \"${getHash()}\";
}"""
}

/*
 * Platform configuration.
 */

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
}

/*
 * IDE configuration.
 */

idea {
    module {
        // Configure the module.
        sourceDirs += file('src/proto')
        generatedSourceDirs += file('src/generated')
    }
}

eclipse {
    classpath {
        file.whenMerged {
            path -> path.entries.add(new SourceFolder('src/generated/main/java', null))
        }
    }
}
